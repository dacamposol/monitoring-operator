// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

type Getter_Expecter struct {
	mock *mock.Mock
}

func (_m *Getter) EXPECT() *Getter_Expecter {
	return &Getter_Expecter{mock: &_m.Mock}
}

// GetAlertManagerURL provides a mock function with given fields: ctx
func (_m *Getter) GetAlertManagerURL(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetAlertManagerURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertManagerURL'
type Getter_GetAlertManagerURL_Call struct {
	*mock.Call
}

// GetAlertManagerURL is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Getter_Expecter) GetAlertManagerURL(ctx interface{}) *Getter_GetAlertManagerURL_Call {
	return &Getter_GetAlertManagerURL_Call{Call: _e.mock.On("GetAlertManagerURL", ctx)}
}

func (_c *Getter_GetAlertManagerURL_Call) Run(run func(ctx context.Context)) *Getter_GetAlertManagerURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Getter_GetAlertManagerURL_Call) Return(_a0 string, _a1 error) *Getter_GetAlertManagerURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetter creates a new instance of Getter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetter(t mockConstructorTestingTNewGetter) *Getter {
	mock := &Getter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
